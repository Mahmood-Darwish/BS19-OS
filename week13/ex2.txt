1) Recovery: due to time and space complexity it is not very efficient or desired, it also can let data be lost or a deadlock happen, usually not practical.
    It can be used in systems where it is possible to retry the transaction.


2) Prevention:
    Doesn't enter the state of deadlock, doesn't need to know in advance the resourses requests,
    doesn't need to spend resourses on detecting, each proccess is required to specify the resources they need prior to the critical
    section. Commonly used in distributed real-time systems and embedded systems, because communication costs in deadlock avoidance is
    very costly due to the need to maintain the global states. Sometimes preempts more than necessary deadlocks.


3) Avoidance:
    Doesn't enter the state of deadlock, less restrictive, no constraints on the resources, though being
    inefficient because of complexity in terms of computations, low resource utilizations.